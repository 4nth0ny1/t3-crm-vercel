// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    companies     Company[]
    companyNotes  CompanyNote[]
    contacts      Contact[]
    attempts      Attempt[]
    contactNotes  ContactNote[]
    opportunities Opportunity[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id            String        @id @default(cuid())
    name          String?
    phone         String?
    city          String?
    state         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    user          User          @relation(fields: [userId], references: [id])
    userId        String
    companyNotes  CompanyNote[]
    contacts      Contact[]
    attempts      Attempt[]
    contactNotes  ContactNote[]
    opportunities Opportunity[]
}

model CompanyNote {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

model Contact {
    id            String        @id @default(cuid())
    name          String
    title         String
    phone         String
    email         String
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId     String
    user          User?         @relation(fields: [userId], references: [id])
    userId        String?
    attempts      Attempt[]
    contactNotes  ContactNote[]
    opportunities Opportunity[]
}

model Attempt {
    id        String   @id @default(cuid())
    type      String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId String
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

model Opportunity {
    id          String   @id @default(cuid())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId   String
    company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?
}

model ContactNote {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId String
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
}
